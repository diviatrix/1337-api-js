import sqlite3pkg from 'sqlite3';
import config from '../config.js';
import messages from '../messages.js';
import log from '../log.js'; // Import the log module

const sqlite3 = sqlite3pkg.verbose();

const db = new sqlite3.Database(config.databasePath, (err) => {
    if (err) {
        log.error(messages.dbConnectionError, err.message);
    } else {
        log.log(messages.dbConnectionSuccess);
    }
});

export default {
    db,
    connect: function() {
        this.db = new sqlite3.Database(config.databasePath, (err) => {
            if (err) {
                log.error(err.message);
            } else {
                // log.log(messages.dbConnectionSuccess);
            }
        });
    },
    close: function() {
        this.db.close((err) => {
            if (err) {
                log.error(err.message);
            } else {
                log.log(messages.goodbye);
            }
        });
    },
    getAll: function(tableName, callback) {
        this.db.all(`SELECT * FROM ${tableName}`, [], (err, rows) => {
            if (err) {
                log.error(err.message);
                callback(err, null);
            } else {
                callback(null, rows);
            }
        });
    },
    getById: function(tableName, id, callback) {
        this.db.get(`SELECT * FROM ${tableName} WHERE id = ?`, [id], (err, row) => {
            if (err) {
                log.error(err.message);
                callback(err, null);
            } else {
                callback(null, row);
            }
        });
    },
    create: function(tableName, data, callback) {
        const placeholders = Object.keys(data).map(() => '?').join(', ');
        const sql = `INSERT INTO ${tableName} (${Object.keys(data).join(', ')}) VALUES (${placeholders})`;
        this.db.run(sql, Object.values(data), function(err) {
            if (err) {
                log.error(err.message);
                callback(err, null);
            } else {
                callback(null, { id: this.lastID });
            }
        });
    },
    update: function(tableName, id, data, callback) {
        const setClause = Object.keys(data).map(key => `${key} = ?`).join(', ');
        const sql = `UPDATE ${tableName} SET ${setClause} WHERE id = ?`;
        this.db.run(sql, [...Object.values(data), id], function(err) {
            if (err) {
                log.error(err.message);
                callback(err, null);
            } else {
                callback(null, { changes: this.changes });
            }
        });
    },
    remove: function(tableName, id, callback) {
        this.db.run(`DELETE FROM ${tableName} WHERE id = ?`, [id], function(err) {
            if (err) {
                log.error(err.message);
                callback(err, null);
            } else {
                callback(null, { changes: this.changes });
            }
        });
    }
};